<?php

/**
 * Implementation of hook_form_alter().
 *
 * Add a form element in the administration interface which allows selecting
 * which material types should be available in the drop down.
 */
function ting_search_typepicker_form_ting_admin_settings_form_alter(&$form, &$form_state){
  $form['types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Material types in dropdown'),
    '#tree' => FALSE,
  );
  $form['types']['ting_search_typepicker_types'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Materials'),
    '#description'   => t('Enter facet specifications, one per line in the format [Ting facet specification]|[Text in dropdown]. Facet specifications without a colon are considered to be simple material type. Else it should be the full facet specification as any number of [facet name]:[facet value], separated by semicolon. Examples: <ul><li>bog|Bøger</li><li>facet.subject:letbib|Letbib</li><li>facet.type:bog;facet.category:børnematerialer|Børnebøger</li></ul>'),
    '#required'      => FALSE,
    '#default_value' => variable_get('ting_search_typepicker_types', ''),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Add the type picker to the search form.
 */
function ting_search_typepicker_form_ting_search_form_alter(&$form, &$form_state){
  // Generate the type picker
  // First we retrieve the options
  $options = array();
  if(variable_get('ting_search_typepicker_types', '') != ''){
  	$rows = explode("\n",variable_get('ting_search_typepicker_types', ''));
  }
  foreach ($rows as $value){
  	$value = explode('|',$value);
        if (strpos($value[0], ':') === FALSE) {
          // Old style type name, change to new.
          $value[0] == 'facet.type:' . $value[0];
        }
        if (substr($value[0], -1) != ';') {
          // Ensure trailing semicolon.
          $value[0] .= ';';
        }
  	$options[$value[0]] = $value[1];
  }

  // Add the form field
  $form['type'] = array(
    '#weight' => 2,
    '#type' => 'select',
    '#options' => $options,
    '#attributes' => array('class' => 'select-type-field'),
    '#after_build' => array('_ting_search_typepicker_add_js_css'),
  );

  // Add submit after type picker
  $form['submit']['#weight'] = 3;
}

function ting_search_typepicker_menu_alter(&$items) {
  $items['ting/search']['page callback'] = 'ting_search_typepicker_ting_search_pages_redirect';
  return $items;
}

/**
 * Alternate search result page.
 */
function ting_search_typepicker_ting_search_pages_redirect() {
  if ($_POST['type']) {
    // If no query (keys) are posted then use the wildcard query.
    // The receiving panel requires a query to be defined in the url.
    $keys = (!$_POST['keys']) ? '*=*' : $_POST['keys'];
    // Add a fragment the same way selecting a facet in the facet browser would
    $fragment = 'facets=' . $_POST['type'];

    return drupal_goto('ting/search/' . $keys, NULL, $fragment);
  }

  return drupal_goto('ting/search/' . search_get_keys(), NULL, NULL, 301);
}

/**
 * Add typepicker javascript
 */
function _ting_search_typepicker_add_js_css($element) {
  drupal_add_css(drupal_get_path('module', 'ting_search_typepicker') . '/css/ting_search_typepicker.css');
  drupal_add_js(drupal_get_path('module', 'ting_search_typepicker') . '/js/ting_search_typepicker.js');
  return $element;
}

/**
 * Implementation of hook_ting_client_request_alter().
 */
function ting_search_typepicker_ting_client_request_alter(&$request) {
  if ($request instanceof TingClientSearchRequest) {
    // Remove sorting from search requests containging the wildcard query
    if (drupal_substr($request->getQuery(), 0, 5) == '(*=*)') {
      $request->setSort(NULL);
    }
  }
}
